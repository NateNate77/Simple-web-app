/*
 * This file is generated by jOOQ.
 */
package simplewebapp.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import simplewebapp.jooq.Keys;
import simplewebapp.jooq.Public;
import simplewebapp.jooq.tables.records.CompaniesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Companies extends TableImpl<CompaniesRecord> {

    private static final long serialVersionUID = -410910595;

    /**
     * The reference instance of <code>public.Companies</code>
     */
    public static final Companies COMPANIES = new Companies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompaniesRecord> getRecordType() {
        return CompaniesRecord.class;
    }

    /**
     * The column <code>public.Companies.ID</code>.
     */
    public final TableField<CompaniesRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('auto_id_company'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Companies.Name</code>.
     */
    public final TableField<CompaniesRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Companies.HeadCompanyID</code>.
     */
    public final TableField<CompaniesRecord, Integer> HEADCOMPANYID = createField("HeadCompanyID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.Companies</code> table reference
     */
    public Companies() {
        this(DSL.name("Companies"), null);
    }

    /**
     * Create an aliased <code>public.Companies</code> table reference
     */
    public Companies(String alias) {
        this(DSL.name(alias), COMPANIES);
    }

    /**
     * Create an aliased <code>public.Companies</code> table reference
     */
    public Companies(Name alias) {
        this(alias, COMPANIES);
    }

    private Companies(Name alias, Table<CompaniesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Companies(Name alias, Table<CompaniesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Companies(Table<O> child, ForeignKey<O, CompaniesRecord> key) {
        super(child, key, COMPANIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CompaniesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPANIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CompaniesRecord> getPrimaryKey() {
        return Keys.COMPANIES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CompaniesRecord>> getKeys() {
        return Arrays.<UniqueKey<CompaniesRecord>>asList(Keys.COMPANIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CompaniesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CompaniesRecord, ?>>asList(Keys.COMPANIES__HEADCOMPANYID);
    }

    public simplewebapp.jooq.tables.Companies companies() {
        return new simplewebapp.jooq.tables.Companies(this, Keys.COMPANIES__HEADCOMPANYID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Companies as(String alias) {
        return new Companies(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Companies as(Name alias) {
        return new Companies(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Companies rename(String name) {
        return new Companies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Companies rename(Name name) {
        return new Companies(name, null);
    }
}
